# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16VkW8elBs3cUYdpogHg9fxA3QGxEEPe7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
import warnings
warnings.filterwarnings("ignore")
from sklearn import linear_model, ensemble
from sklearn.model_selection import cross_val_score
from sklearn import model_selection
import numpy
import skopt
from skopt.space import Real, Categorical, Integer
from skopt import BayesSearchCV
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_validate

data = pd.read_csv("/content/winequality-red.csv", sep = ";")
x = data.drop(columns = ['quality'])
y = data['quality']

def cross_validation_score(x, y, estimator):
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.2, random_state=736)
    cv_results = cross_validate(
          estimator, x_train, y_train, cv=10, return_estimator=True, scoring = "balanced_accuracy"
    )
    cv_results = pd.DataFrame(cv_results)
    print(cv_results)
    cv_test_scores = cv_results["test_score"]
    print(
            "Generalization score with hyperparameters tuning:\n"
            f"{cv_test_scores.mean():.3f} Â± {cv_test_scores.std():.3f}"
    )
    estimator.fit(x_train, y_train)
    print(estimator.score(x_test, y_test))
    print(estimator.best_estimator_)
    print(estimator.best_params_)
    print(estimator.best_score_)

print("optimized Ridge:\n")
cross_validation_score(x, y, linear_model.RidgeClassifier(alpha=1.267774542235981, max_iter=22377, solver='cholesky', tol=0.002318281928932147))
print("default Ridge:\n")
cross_validation_score(x, y, linear_model.RidgeClassifier())
print("\n")
print("optimized Bagging:\n")
cross_validation_score(x, y, ensemble.BaggingClassifier(max_features = 0.0329, max_samples = 0.9074, n_estimators = 6560))
print("default Bagging:\n")
cross_validation_score(x, y, ensemble.BaggingClassifier())
print("optimized Random Forest:\n")
cross_validation_score(x, y, ensemble.RandomForestClassifier(max_depth = 10, criterion = 'gini', n_estimators = 6560))
print("default Random Forest:\n")
cross_validation_score(x, y, ensemble.RandomForestClassifier())

